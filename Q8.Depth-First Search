#include <iostream>
#include <list>
#include <vector>
using namespace std;

class Graph {
    int V;                     
    vector<list<int>> adjList;  

    void DFSUtil(int v, vector<bool>& visited) {
        visited[v] = true;  
        cout << v << " ";   

        // Recur for all the vertices adjacent to this vertex
        for (auto it = adjList[v].begin(); it != adjList[v].end(); ++it) {
            if (!visited[*it]) {
                DFSUtil(*it, visited);
            }
        }
    }

public:
    Graph(int V) : V(V), adjList(V) {}  

    void addEdge(int v, int w) {
        adjList[v].push_back(w);
        adjList[w].push_back(v);
    }
    void DFS(int start) {
        vector<bool> visited(V, false);  
        DFSUtil(start, visited);         
    }
};

int main() {
    
    Graph g(6);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 4);
    g.addEdge(3, 4);
    g.addEdge(3, 5);
    g.addEdge(4, 5);

    cout << "Depth-First Traversal starting from vertex 0: ";
    g.DFS(0); 

    return 0;
}
