#include <iostream>
#include <list>
#include <queue>
#include <vector>
using namespace std;

class Graph {
    int V;                      
    vector<list<int>> adjList;  

public:
    Graph(int V) : V(V), adjList(V) {}  

    
    void addEdge(int v, int w) {
        adjList[v].push_back(w);
        adjList[w].push_back(v); 
    }

    
    void BFS(int start) {
        vector<bool> visited(V, false);  
        queue<int> queue;                

        visited[start] = true;          
        queue.push(start);

        while (!queue.empty()) {
            start = queue.front(); 
            cout << start << " ";
            queue.pop();

            for (auto it = adjList[start].begin(); it != adjList[start].end(); ++it) {
                if (!visited[*it]) {
                    visited[*it] = true;
                    queue.push(*it);
                }
            }
        }
    }
};

int main() {
    Graph g(6);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 4);
    g.addEdge(3, 4);
    g.addEdge(3, 5);
    g.addEdge(4, 5);

    cout << "Breadth-First Traversal starting from vertex 0: ";
    g.BFS(0); 

    return 0;
}
