#include <iostream>
#include <vector>
using namespace std;

int partition(vector<int>& arr, int low, int high, int& comparisons) {
    int pivot = arr[high]; 
    int i = (low - 1);     

    for (int j = low; j <= high - 1; j++) {
      
        if (arr[j] <= pivot) {
            i++; 
            swap(arr[i], arr[j]);
            comparisons++;
        }
    }
    swap(arr[i + 1], arr[high]);
    comparisons++;
    return (i + 1);
}


void quickSort(vector<int>& arr, int low, int high, int& comparisons) {
    if (low < high) {
        
        int pi = partition(arr, low, high, comparisons);

        quickSort(arr, low, pi - 1, comparisons);
        quickSort(arr, pi + 1, high, comparisons);
    }
}

int main() {
    vector<int> arr = {12, 11, 13, 5, 6}; // Example array
    int n = arr.size();

    int comparisons = 0; // Variable to count comparisons

    quickSort(arr, 0, n - 1, comparisons);

    cout << "Sorted array: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;

    cout << "Number of comparisons: " << comparisons << endl;

    return 0;
}
